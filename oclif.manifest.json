{"version":"2.2.3","commands":{"copyright":{"id":"copyright","description":"\n\tDisplays copyright notice.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["copyright"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[]},"warranty":{"id":"warranty","description":"\n\tDisplays warranty notice.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["warranty"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[]},"account:create":{"id":"account:create","description":"\n\t\tReturns a randomly-generated mnemonic passphrase with its corresponding public/private key pair and Lisk address.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["account:create","account:create --number=3"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"number":{"name":"number","type":"option","char":"n","description":"Number of accounts to create.","default":"1"}},"args":[]},"account:get":{"id":"account:get","description":"\n\t\tGets account information from the blockchain.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["account:get 3520445367460290306L","account:get 3520445367460290306L,2802325248134221536L"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[{"name":"addresses","description":"Comma-separated address(es) to get information about.","required":true}]},"account:show":{"id":"account:show","description":"\n\t\tShows account information for a given passphrase.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["account:show"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"}},"args":[]},"block:get":{"id":"block:get","description":"\n\t\tGets block information from the blockchain.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["block:get 17108498772892203620","block:get 17108498772892203620,8541428004955961162"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[{"name":"blockIds","description":"Comma-separated block ID(s) to get information about.","required":true}]},"config:set":{"id":"config:set","description":"\n\t\tSets configuration.\n\t\t...\n\t\tVariables available: api.nodes, api.network, json, pretty.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["config:set json true","config:set api.network main","config:set api.nodes https://127.0.0.1:4000,http://mynode.com:7000"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[{"name":"variable","description":"","required":true,"options":["api.nodes","api.network","json","pretty"]},{"name":"values","description":"","required":false}]},"config:show":{"id":"config:show","description":"\n\t\tPrints the current configuration.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["config:show"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[]},"core:install":{"id":"core:install","description":"Install an instance of Lisk Core.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:install lisk-mainnet","core:install --no-start lisk-mainnet","core:install --no-snapshot lisk-mainnet","core:install --lisk-version=2.0.0 lisk-mainnet","core:install --network=testnet --release-url=https://downloads.lisk.io/lisk/mainnet/1.6.0/lisk-1.6.0-Linux-x86_64.tar.gz lisk-mainnet","core:install --network=mainnet --snapshot-url=https://downloads.lisk.io/lisk/mainnet/blockchain.db.gz custom-mainnet"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"installation-path":{"name":"installation-path","type":"option","char":"p","description":"Lisk Core installation path.","hidden":true,"default":"~/.lisk/instances"},"lisk-version":{"name":"lisk-version","type":"option","description":"Lisk Core version."},"no-snapshot":{"name":"no-snapshot","type":"boolean","description":"Install Lisk Core without a blockchain snapshot.","allowNo":false},"no-start":{"name":"no-start","type":"boolean","description":"Install Lisk Core without starting.","allowNo":false},"network":{"name":"network","type":"option","char":"n","description":"Lisk Core network name.","options":["mainnet","testnet","betanet","alphanet","devnet"],"default":"mainnet"},"release-url":{"name":"release-url","type":"option","char":"r","description":"Lisk Core download URL."},"snapshot-url":{"name":"snapshot-url","type":"option","char":"s","description":"Lisk Core blockchain snapshot URL.","default":"https://downloads.lisk.io/lisk/mainnet/blockchain.db.gz"}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:logs":{"id":"core:logs","description":"Stream logs of a Lisk Core instance.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:logs mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:restart":{"id":"core:restart","description":"Restart Lisk Core instance.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:restart mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:status":{"id":"core:status","description":"Show the status of a Lisk Core instances.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:status","core:status mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","hidden":true,"allowNo":false},"pretty":{"name":"pretty","type":"boolean","hidden":true,"allowNo":false}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":false}]},"core:uninstall":{"id":"core:uninstall","description":"Uninstall an instance of Lisk Core.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:uninstall mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:upgrade":{"id":"core:upgrade","description":"Upgrade an instance of Lisk Core to a specified or latest version.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:upgrade lisk-mainnet","core:upgrade --lisk-version=2.0.0 lisk-mainnet","core:upgrade --release-url=https://downloads.lisk.io/lisk/mainnet/2.1.0/lisk-2.1.0-Linux-x86_64.tar.gz lisk-mainnet"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"lisk-version":{"name":"lisk-version","type":"option","description":"Lisk Core version."},"release-url":{"name":"release-url","type":"option","char":"r","description":"Lisk Core download URL."}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"delegate:get":{"id":"delegate:get","description":"\n\tGets delegate information from the blockchain.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["delegate:get lightcurve","delegate:get lightcurve,4miners.net"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[{"name":"usernames","description":"Comma-separated username(s) to get information about.","required":true}]},"delegate:voters":{"id":"delegate:voters","description":"\n\tGets voters information for given delegate(s) from the blockchain.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["delegate:voters lightcurve","delegate:voters lightcurve,4miners.net","delegate:voters lightcurve,4miners.net --limit 20 --offset 5 --sort publicKey:asc --pretty"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"limit":{"name":"limit","type":"option","description":"Limit applied to results.","default":"10"},"offset":{"name":"offset","type":"option","description":"Offset applied to results.","default":"0"},"sort":{"name":"sort","type":"option","description":"Fields to sort results by.","default":"balance:desc"}},"args":[{"name":"usernames","description":"Comma-separated username(s) to get information about.","required":true}]},"delegate:votes":{"id":"delegate:votes","description":"\n\tGets votes information for given account(s) from the blockchain.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["delegate:votes 13133549779353512613L","delegate:votes 13133549779353512613L,16010222169256538112L","delegate:votes 13133549779353512613L,16010222169256538112L --limit 20 --offset 5 --sort balance:asc --pretty"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"limit":{"name":"limit","type":"option","description":"Limit applied to results.","default":"10"},"offset":{"name":"offset","type":"option","description":"Offset applied to results.","default":"0"},"sort":{"name":"sort","type":"option","description":"Fields to sort results by.","default":"balance:desc"}},"args":[{"name":"addresses","description":"Comma-separated address(es) to get information about.","required":true}]},"message:decrypt":{"id":"message:decrypt","description":"\n\tDecrypts a previously encrypted message from a given sender public key for a known nonce using your secret passphrase.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["message:decrypt bba7e2e6a4639c431b68e31115a71ffefcb4e025a4d1656405dfdcd8384719e0 4b800d90d54eda4d093b5e4e6bf9ed203bc90e1560bd628d dcaa605af45a4107a699755237b4c08e1ef75036743d7e4814dea7"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"message":{"name":"message","type":"option","char":"m","description":"Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=stdin\n"}},"args":[{"name":"senderPublicKey","description":"Public key of the sender of the message.","required":true},{"name":"nonce","description":"Nonce used during encryption.","required":true},{"name":"message","description":"Encrypted message."}]},"message:encrypt":{"id":"message:encrypt","description":"\n\tEncrypts a message for a given recipient public key using your secret passphrase.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["message:encrypt bba7e2e6a4639c431b68e31115a71ffefcb4e025a4d1656405dfdcd8384719e0 \"Hello world\""],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"message":{"name":"message","type":"option","char":"m","description":"Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=stdin\n"}},"args":[{"name":"recipientPublicKey","description":"Public key of the recipient of the message.","required":true},{"name":"message","description":"Message to encrypt."}]},"message:sign":{"id":"message:sign","description":"\n\tSigns a message using your secret passphrase.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["message:sign \"Hello world\""],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"message":{"name":"message","type":"option","char":"m","description":"Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=stdin\n"}},"args":[{"name":"message","description":"Message to sign."}]},"message:verify":{"id":"message:verify","description":"\n\tVerifies a signature for a message using the signer’s public key.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["message:verify 647aac1e2df8a5c870499d7ddc82236b1e10936977537a3844a6b05ea33f9ef6 2a3ca127efcf7b2bf62ac8c3b1f5acf6997cab62ba9fde3567d188edcbacbc5dc8177fb88d03a8691ce03348f569b121bca9e7a3c43bf5c056382f35ff843c09 \"Hello world\""],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"message":{"name":"message","type":"option","char":"m","description":"Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=stdin\n"}},"args":[{"name":"publicKey","description":"Public key of the signer of the message.","required":true},{"name":"signature","description":"Signature to verify.","required":true},{"name":"message","description":"Message to verify."}]},"node:forging":{"id":"node:forging","description":"Update the forging status of a Lisk Core instance.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["node:forging enable 647aac1e2df8a5c870499d7ddc82236b1e10936977537a3844a6b05ea33f9ef6","node:forging disable 647aac1e2df8a5c870499d7ddc82236b1e10936977537a3844a6b05ea33f9ef6"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"password":{"name":"password","type":"option","char":"w","description":"Specifies a source for your secret password. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --password=prompt (default behaviour)\n\t- --password=pass:password123 (should only be used where security is not important)\n\t- --password=env:PASSWORD\n\t- --password=file:/path/to/my/password.txt (takes the first line only)\n\t- --password=stdin (takes the first line only)\n"}},"args":[{"name":"status","description":"Desired forging status.","required":true,"options":["enable","disable"]},{"name":"publicKey","description":"Public key of the delegate whose status should be updated.","required":true}]},"node:get":{"id":"node:get","description":"Get the network status from a Lisk Core instance.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["node:get","node:get --forging-status"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"forging-status":{"name":"forging-status","type":"boolean","description":"Additionally provides information about forging status.","allowNo":false}},"args":[]},"passphrase:decrypt":{"id":"passphrase:decrypt","description":"\n\tDecrypts your secret passphrase using the password which was provided at the time of encryption.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["passphrase:decrypt \"iterations=1000000&cipherText=9b1c60&iv=5c8843f52ed3c0f2aa0086b0&salt=2240b7f1aa9c899894e528cf5b600e9c&tag=23c01112134317a63bcf3d41ea74e83b&version=1\""],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"password":{"name":"password","type":"option","char":"w","description":"Specifies a source for your secret password. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --password=prompt (default behaviour)\n\t- --password=pass:password123 (should only be used where security is not important)\n\t- --password=env:PASSWORD\n\t- --password=file:/path/to/my/password.txt (takes the first line only)\n\t- --password=stdin (takes the first line only)\n"},"passphrase":{"name":"passphrase","type":"option","description":"Specifies a source for providing an encrypted passphrase to the command. If a string is provided directly as an argument, this option will be ignored. The encrypted passphrase must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\n\tNote: if both an encrypted passphrase and the password are passed via stdin, the password must be the first line.\n\n\tExamples:\n\t\t- --passphrase file:/path/to/my/encrypted_passphrase.txt (takes the first line only)\n\t\t- --passphrase stdin (takes the first line only)\n"}},"args":[{"name":"encryptedPassphrase","description":"Encrypted passphrase to decrypt."}]},"passphrase:encrypt":{"id":"passphrase:encrypt","description":"\n\t\tEncrypts your secret passphrase under a password.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["passphrase:encrypt"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"password":{"name":"password","type":"option","char":"w","description":"Specifies a source for your secret password. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --password=prompt (default behaviour)\n\t- --password=pass:password123 (should only be used where security is not important)\n\t- --password=env:PASSWORD\n\t- --password=file:/path/to/my/password.txt (takes the first line only)\n\t- --password=stdin (takes the first line only)\n"},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"outputPublicKey":{"name":"outputPublicKey","type":"boolean","description":"Includes the public key in the output. This option is provided for the convenience of node operators.","allowNo":false}},"args":[]},"signature:broadcast":{"id":"signature:broadcast","description":"\n\tBroadcasts a signature for a transaction from a multisignature account.\n\tAccepts a stringified JSON signature as an argument, or a signature can be piped from a previous command.\n\tIf piping make sure to quote out the entire command chain to avoid piping-related conflicts in your shell.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["signature:broadcast '{\"transactionId\":\"abcd1234\",\"publicKey\":\"abcd1234\",\"signature\":\"abcd1234\"}'","echo '{\"transactionId\":\"abcd1234\",\"publicKey\":\"abcd1234\",\"signature\":\"abcd1234\"}' | lisk signature:broadcast"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[{"name":"signature","description":"Signature to broadcast."}]},"signature:create":{"id":"signature:create","description":"\n\tCreate a signature object for a transaction from a multisignature account.\n\tAccepts a stringified JSON transaction as an argument.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["signature:create '{\"amount\":\"10\",\"recipientId\":\"8050281191221330746L\",\"senderPublicKey\":\"3358a1562f9babd523a768e700bb12ad58f230f84031055802dc0ea58cef1e1b\",\"timestamp\":59353522,\"type\":0,\"asset\":{},\"signature\":\"b84b95087c381ad25b5701096e2d9366ffd04037dcc941cd0747bfb0cf93111834a6c662f149018be4587e6fc4c9f5ba47aa5bbbd3dd836988f153aa8258e604\"}'"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"}},"args":[{"name":"transaction","description":"Transaction in JSON format."}]},"transaction:broadcast":{"id":"transaction:broadcast","description":"\n\tBroadcasts a transaction to the network via the node specified in the current config.\n\tAccepts a stringified JSON transaction as an argument, or a transaction can be piped from a previous command.\n\tIf piping make sure to quote out the entire command chain to avoid piping-related conflicts in your shell.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["broadcast transaction '{\"type\":0,\"amount\":\"100\",...}'","echo '{\"type\":0,\"amount\":\"100\",...}' | lisk transaction:broadcast"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true}},"args":[{"name":"transaction","description":"Transaction to broadcast in JSON format."}]},"transaction:create":{"id":"transaction:create","description":"\n\tCreates a transaction object.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:create --type=0 100 13356260975429434553L","transaction:create --type=delegate lightcurve"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"type":{"name":"type","type":"option","char":"t","description":"type of transaction to create","required":true,"options":["0","transfer","1","second-passphrase","2","delegate","3","vote","4","multisignature"]},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"second-passphrase":{"name":"second-passphrase","type":"option","char":"s","description":"Specifies a source for your second secret passphrase. For certain commands a second passphrase is necessary, in which case Lisk Commander will prompt you for it if this option is not set. Otherwise, Lisk Commander will assume you want to use one passphrase only.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --second-passphrase=prompt (to force a prompt even when a second passphrase is not always necessary)\n\t- --second-passphrase='pass:my second secret passphrase' (should only be used where security is not important)\n\t- --second-passphrase=env:SECOND_SECRET_PASSPHRASE\n\t- --second-passphrase=file:/path/to/my/secondPassphrase.txt (takes the first line only)\n\t- --second-passphrase=stdin (takes one line only)\n"},"no-signature":{"name":"no-signature","type":"boolean","description":"Creates the transaction without a signature. Your passphrase will therefore not be required.","allowNo":false},"votes":{"name":"votes","type":"option","description":"Specifies the public keys for the delegate candidates you want to vote for. Takes either a string of public keys separated by commas, or a path to a file which contains the public keys.\n\tExamples:\n\t- --votes=publickey1,publickey2\n\t- --votes=file:/path/to/my/votes.txt (every public key should be on a new line)\n"},"unvotes":{"name":"unvotes","type":"option","description":"Specifies the public keys for the delegate candidates you want to remove your vote from. Takes either a string of public keys separated by commas, or a path to a file which contains the public keys.\n\tExamples:\n\t- --unvotes=publickey1,publickey2\n\t- --unvotes=file:/path/to/my/unvotes.txt (every public key should be on a new line)\n"}},"args":[{"name":"0_arg"},{"name":"0_arg"},{"name":"0_arg"}]},"transaction:get":{"id":"transaction:get","description":"\n\tGets transaction information from the blockchain.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:get 10041151099734832021","transaction:get 10041151099734832021,1260076503909567890","transaction:get 10041151099734832021,1260076503909567890 --state=unprocessed","transaction:get --state=unsigned --sender-id=1813095620424213569L","transaction:get 10041151099734832021 --state=unsigned --sender-id=1813095620424213569L","transaction:get --sender-id=1813095620424213569L","transaction:get --limit=10 --sort=amount:desc","transaction:get --limit=10 --offset=5"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"state":{"name":"state","type":"option","char":"s","description":"Get transactions based on a given state. Possible values for the state are 'unsigned' and 'unprocessed'.\n\tExamples:\n\t- --state=unsigned\n\t- --state=unprocessed\n","options":["unsigned","unprocessed"]},"sender-id":{"name":"sender-id","type":"option","description":"Get transactions based by sender-id which is sender's lisk address'.\n\tExamples:\n\t- --sender-id=12668885769632475474L\n"},"limit":{"name":"limit","type":"option","description":"Limits the returned transactions array by specified integer amount. Maximum is 100.","default":"10"},"offset":{"name":"offset","type":"option","description":"Offsets the returned transactions array by specified integer amount.","default":"0"},"sort":{"name":"sort","type":"option","description":"Fields to sort results by.","options":["amount:asc","amount:desc","fee:asc","fee:desc","type:asc","type:desc","timestamp:asc","timestamp:desc"],"default":"timestamp:desc"}},"args":[{"name":"ids","description":"Comma-separated transaction ID(s) to get information about.","required":false}]},"transaction:sign":{"id":"transaction:sign","description":"\n\tSign a transaction using your secret passphrase.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:sign '{\"amount\":\"100\",\"recipientId\":\"13356260975429434553L\",\"senderPublicKey\":null,\"timestamp\":52871598,\"type\":0,\"fee\":\"10000000\",\"recipientPublicKey\":null,\"asset\":{}}'"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"second-passphrase":{"name":"second-passphrase","type":"option","char":"s","description":"Specifies a source for your second secret passphrase. For certain commands a second passphrase is necessary, in which case Lisk Commander will prompt you for it if this option is not set. Otherwise, Lisk Commander will assume you want to use one passphrase only.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --second-passphrase=prompt (to force a prompt even when a second passphrase is not always necessary)\n\t- --second-passphrase='pass:my second secret passphrase' (should only be used where security is not important)\n\t- --second-passphrase=env:SECOND_SECRET_PASSPHRASE\n\t- --second-passphrase=file:/path/to/my/secondPassphrase.txt (takes the first line only)\n\t- --second-passphrase=stdin (takes one line only)\n"}},"args":[{"name":"transaction","description":"Transaction to sign in JSON format."}]},"transaction:verify":{"id":"transaction:verify","description":"\n\tVerifies a transaction has a valid signature.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:verify '{\"type\":0,\"amount\":\"100\",...}'","transaction:verify '{\"type\":0,\"amount\":\"100\",...}' --second-public-key=647aac1e2df8a5c870499d7ddc82236b1e10936977537a3844a6b05ea33f9ef6"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"second-public-key":{"name":"second-public-key","type":"option","description":"Specifies a source for providing a second public key to the command. The second public key must be provided via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\n\tNote: if both transaction and second public key are passed via stdin, the transaction must be the first line.\n\n\tExamples:\n\t- --second-public-key file:/path/to/my/message.txt\n\t- --second-public-key 790049f919979d5ea42cca7b7aa0812cbae8f0db3ee39c1fe3cef18e25b67951\n"}},"args":[{"name":"transaction","description":"Transaction to verify in JSON format."}]},"core:start:cache":{"id":"core:start:cache","description":"Start the cache server.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:start:cache mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:start:database":{"id":"core:start:database","description":"Start the database server.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:start:database mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:start":{"id":"core:start","description":"Start Lisk Core instance.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:start mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:stop:cache":{"id":"core:stop:cache","description":"Stop the cache server.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:stop:cache mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:stop:database":{"id":"core:stop:database","description":"Stop the database server.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:stop:database mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"core:stop":{"id":"core:stop","description":"Stop Lisk Core instance.","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["core:stop mainnet-latest"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","hidden":true,"allowNo":true}},"args":[{"name":"name","description":"Lisk Core installation directory name.","required":true}]},"transaction:create:delegate":{"id":"transaction:create:delegate","description":"\n\tCreates a transaction which will register the account as a delegate candidate if broadcast to the network.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:create:delegate lightcurve"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"second-passphrase":{"name":"second-passphrase","type":"option","char":"s","description":"Specifies a source for your second secret passphrase. For certain commands a second passphrase is necessary, in which case Lisk Commander will prompt you for it if this option is not set. Otherwise, Lisk Commander will assume you want to use one passphrase only.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --second-passphrase=prompt (to force a prompt even when a second passphrase is not always necessary)\n\t- --second-passphrase='pass:my second secret passphrase' (should only be used where security is not important)\n\t- --second-passphrase=env:SECOND_SECRET_PASSPHRASE\n\t- --second-passphrase=file:/path/to/my/secondPassphrase.txt (takes the first line only)\n\t- --second-passphrase=stdin (takes one line only)\n"},"no-signature":{"name":"no-signature","type":"boolean","description":"Creates the transaction without a signature. Your passphrase will therefore not be required.","allowNo":false}},"args":[{"name":"username","description":"Username to register as a delegate.","required":true}]},"transaction:create:multisignature":{"id":"transaction:create:multisignature","description":"\n\tCreates a transaction which will register the account as a multisignature account if broadcast to the network, using the following arguments:\n\t\t1. Number of hours the transaction should remain in the transaction pool before becoming invalid.\n\t\t2. Minimum number of signatures required for a transaction from the account to be valid.\n\t\t3. Public keys to verify signatures against for the multisignature group.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:create:multisignature 24 2 215b667a32a5cd51a94c9c2046c11fffb08c65748febec099451e3b164452bca,922fbfdd596fa78269bbcadc67ec2a1cc15fc929a19c462169568d7a3df1a1aa"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"second-passphrase":{"name":"second-passphrase","type":"option","char":"s","description":"Specifies a source for your second secret passphrase. For certain commands a second passphrase is necessary, in which case Lisk Commander will prompt you for it if this option is not set. Otherwise, Lisk Commander will assume you want to use one passphrase only.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --second-passphrase=prompt (to force a prompt even when a second passphrase is not always necessary)\n\t- --second-passphrase='pass:my second secret passphrase' (should only be used where security is not important)\n\t- --second-passphrase=env:SECOND_SECRET_PASSPHRASE\n\t- --second-passphrase=file:/path/to/my/secondPassphrase.txt (takes the first line only)\n\t- --second-passphrase=stdin (takes one line only)\n"},"no-signature":{"name":"no-signature","type":"boolean","description":"Creates the transaction without a signature. Your passphrase will therefore not be required.","allowNo":false}},"args":[{"name":"lifetime","description":"Number of hours the transaction should remain in the transaction pool before becoming invalid.","required":true},{"name":"minimum","description":"Minimum number of signatures required for a transaction from the account to be valid.","required":true},{"name":"keysgroup","description":"Public keys to verify signatures against for the multisignature group.","required":true}]},"transaction:create:second-passphrase":{"id":"transaction:create:second-passphrase","description":"\n\tCreates a transaction which will register a second passphrase for the account if broadcast to the network.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:create:second-passphrase"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"second-passphrase":{"name":"second-passphrase","type":"option","char":"s","description":"Specifies a source for your second secret passphrase. For certain commands a second passphrase is necessary, in which case Lisk Commander will prompt you for it if this option is not set. Otherwise, Lisk Commander will assume you want to use one passphrase only.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --second-passphrase=prompt (to force a prompt even when a second passphrase is not always necessary)\n\t- --second-passphrase='pass:my second secret passphrase' (should only be used where security is not important)\n\t- --second-passphrase=env:SECOND_SECRET_PASSPHRASE\n\t- --second-passphrase=file:/path/to/my/secondPassphrase.txt (takes the first line only)\n\t- --second-passphrase=stdin (takes one line only)\n"},"no-signature":{"name":"no-signature","type":"boolean","description":"Creates the transaction without a signature. Your passphrase will therefore not be required.","allowNo":false}},"args":[]},"transaction:create:transfer":{"id":"transaction:create:transfer","description":"\n\tCreates a transaction which will transfer the specified amount to an address if broadcast to the network.\n\t\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:create:transfer 100 13356260975429434553L"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"second-passphrase":{"name":"second-passphrase","type":"option","char":"s","description":"Specifies a source for your second secret passphrase. For certain commands a second passphrase is necessary, in which case Lisk Commander will prompt you for it if this option is not set. Otherwise, Lisk Commander will assume you want to use one passphrase only.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --second-passphrase=prompt (to force a prompt even when a second passphrase is not always necessary)\n\t- --second-passphrase='pass:my second secret passphrase' (should only be used where security is not important)\n\t- --second-passphrase=env:SECOND_SECRET_PASSPHRASE\n\t- --second-passphrase=file:/path/to/my/secondPassphrase.txt (takes the first line only)\n\t- --second-passphrase=stdin (takes one line only)\n"},"no-signature":{"name":"no-signature","type":"boolean","description":"Creates the transaction without a signature. Your passphrase will therefore not be required.","allowNo":false},"data":{"name":"data","type":"option","char":"d","description":"Optional UTF8 encoded data (maximum of 64 bytes) to include in the transaction asset.\n\tExamples:\n\t- --data=customInformation\n"}},"args":[{"name":"amount","description":"Amount of LSK to send.","required":true},{"name":"address","description":"Address of the recipient.","required":true}]},"transaction:create:vote":{"id":"transaction:create:vote","description":"\n\tCreates a transaction which will cast votes (or unvotes) for delegate candidates using their public keys if broadcast to the network.\n\t","pluginName":"lisk-commander","pluginType":"core","aliases":[],"examples":["transaction:create:vote --votes 215b667a32a5cd51a94c9c2046c11fffb08c65748febec099451e3b164452bca,922fbfdd596fa78269bbcadc67ec2a1cc15fc929a19c462169568d7a3df1a1aa --unvotes e01b6b8a9b808ec3f67a638a2d3fa0fe1a9439b91dbdde92e2839c3327bd4589,ac09bc40c889f688f9158cca1fcfcdf6320f501242e0f7088d52a5077084ccba"],"flags":{"json":{"name":"json","type":"boolean","char":"j","description":"Prints output in JSON format. You can change the default behaviour in your config.json file.","allowNo":true},"pretty":{"name":"pretty","type":"boolean","description":"Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behaviour in your config.json file.","allowNo":true},"passphrase":{"name":"passphrase","type":"option","char":"p","description":"Specifies a source for your secret passphrase. Lisk Commander will prompt you for input if this option is not set.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --passphrase=prompt (default behaviour)\n\t- --passphrase='pass:my secret passphrase' (should only be used where security is not important)\n\t- --passphrase=env:SECRET_PASSPHRASE\n\t- --passphrase=file:/path/to/my/passphrase.txt (takes the first line only)\n\t- --passphrase=stdin (takes one line only)\n"},"second-passphrase":{"name":"second-passphrase","type":"option","char":"s","description":"Specifies a source for your second secret passphrase. For certain commands a second passphrase is necessary, in which case Lisk Commander will prompt you for it if this option is not set. Otherwise, Lisk Commander will assume you want to use one passphrase only.\n\tSource must be one of `prompt`, `pass`, `env`, `file` or `stdin`. For `pass`, `env` and `file` a corresponding identifier must also be provided.\n\tExamples:\n\t- --second-passphrase=prompt (to force a prompt even when a second passphrase is not always necessary)\n\t- --second-passphrase='pass:my second secret passphrase' (should only be used where security is not important)\n\t- --second-passphrase=env:SECOND_SECRET_PASSPHRASE\n\t- --second-passphrase=file:/path/to/my/secondPassphrase.txt (takes the first line only)\n\t- --second-passphrase=stdin (takes one line only)\n"},"no-signature":{"name":"no-signature","type":"boolean","description":"Creates the transaction without a signature. Your passphrase will therefore not be required.","allowNo":false},"votes":{"name":"votes","type":"option","description":"Specifies the public keys for the delegate candidates you want to vote for. Takes either a string of public keys separated by commas, or a path to a file which contains the public keys.\n\tExamples:\n\t- --votes=publickey1,publickey2\n\t- --votes=file:/path/to/my/votes.txt (every public key should be on a new line)\n"},"unvotes":{"name":"unvotes","type":"option","description":"Specifies the public keys for the delegate candidates you want to remove your vote from. Takes either a string of public keys separated by commas, or a path to a file which contains the public keys.\n\tExamples:\n\t- --unvotes=publickey1,publickey2\n\t- --unvotes=file:/path/to/my/unvotes.txt (every public key should be on a new line)\n"}},"args":[]}}}